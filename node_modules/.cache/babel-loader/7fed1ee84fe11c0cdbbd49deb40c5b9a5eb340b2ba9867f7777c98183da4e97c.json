{"ast":null,"code":"var _jsxFileName = \"/Users/goseoyeong/Documents/\\u1112\\u1161\\u11AB\\u1100\\u116E\\u11A8\\u110B\\u116C\\u1103\\u1162/4-1/\\u110F\\u1162\\u11B8\\u1109\\u1173\\u1110\\u1169\\u11AB\\u1109\\u1165\\u11AF\\u1100\\u1168\\u1106\\u1175\\u11BE\\u1109\\u1175\\u11AF\\u1109\\u1173\\u11B8/semi/SC_React_Part/src/component/Kakao.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport './Kakao.css';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Kakao() {\n  _s();\n  const [overlays, setOverlays] = useState([]);\n  const closeOverlays = () => {\n    overlays.forEach(function (overlay) {\n      overlay.setMap(null);\n    });\n  };\n  const mapscript = useCallback(() => {\n    //지도 표시\n    if (window.kakao && window.kakao.maps) {\n      var container = document.getElementById('map');\n      var options = {\n        center: new window.kakao.maps.LatLng(37.336382765356035, 127.26531823399158),\n        level: 3\n      };\n      const map = new window.kakao.maps.Map(container, options);\n      map.addOverlayMapTypeId(window.kakao.maps.MapTypeId.TRAFFIC); //실시간 교통\n      // map.addOverlayMapTypeId(window.kakao.maps.MapTypeId.ROADVIEW); //로드뷰\n      var mapTypeControl = new window.kakao.maps.MapTypeControl(); //type controller\n      map.addControl(mapTypeControl, window.kakao.maps.ControlPosition.RIGHT);\n\n      // 지도 확대 축소를 제어할 수 있는  줌 컨트롤을 생성합니다\n      var zoomControl = new window.kakao.maps.ZoomControl();\n      map.addControl(zoomControl, window.kakao.maps.ControlPosition.RIGHT);\n      var overlays = [];\n      window.kakao.maps.event.addListener(map, 'bounds_changed', function () {\n        var bound = map.getBounds();\n        var swLatlng = bound.getSouthWest();\n        var neLatlng = bound.getNorthEast();\n        console.log('남서쪽 위경도 : ' + swLatlng.toString() + ',' + '북동쪽 위경도 : ' + neLatlng.toString());\n\n        //서버에 GET 요청\n        const url = `${process.env.REACT_APP_SERVER_URL}/charger/search/marker?swLat=${swLatlng.getLat()}&swLng=${swLatlng.getLng()}&neLat=${neLatlng.getLat()}&neLng=${neLatlng.getLng()}`;\n        axios.get(url).then(response => {\n          console.log('서버 응답', response.data);\n\n          // 기존 마커와 오버레이 제거\n          closeOverlays();\n\n          //마커 생성\n          const newOverlays = response.data.result.forEach(data => {\n            var position = new window.kakao.maps.LatLng(data.lat, data.lng);\n            var content = `<div class=\"wrap\"> \n                                        <div class=\"info\"> \n                                            <div class=\"title\"> \n                                                ${data.name}  \n                                            </div> \n                                            <div class=\"body\"> \n                                                <div class=\"desc\"> \n                                                    <div class=\"ellipsis\">${data.address}</div> \n                                                    <div class=\"jibun ellipsis\">${data.name}는</div> \n                                                    <div class=\"jibun ellipsis\">${data.operatorName}회사에서 만든 충전기이다.</div> \n                                                </div> \n                                                <button class=\"img\" id=\"bookmarkButton\"></button> \n                                            </div> \n                                        </div> \n                                    </div>`;\n            // 마커를 표시할 지도\n            var marker = new window.kakao.maps.Marker({\n              position: position,\n              map: map\n            });\n            // customize overlay\n            var overlay = new window.kakao.maps.CustomOverlay({\n              position: position,\n              content: content,\n              yAnchor: 1\n            });\n            window.kakao.maps.event.addListener(marker, \"click\", function () {\n              closeOverlays();\n              overlay.setMap(map);\n            });\n            return overlay;\n          });\n          setOverlays(newOverlays); //새로운 overlays 업데이트\n        }).catch(error => {\n          console.log('GET 요청 에러', error);\n        });\n      });\n    }\n  }, [overlays]);\n  useEffect(() => {\n    mapscript();\n    const script = document.createElement(\"script\");\n    script.src = `//dapi.kakao.com/v2/maps/sdk.js?appkey=${process.env.REACT_APP_KAKAOMAP_API_KEY}&libraries=services,drawing`;\n    script.async = true;\n    script.onload = () => {\n      mapscript();\n    };\n    script.onerror = error => {\n      console.error(\"Error loading Kakao maps script:\", error);\n    };\n    document.body.appendChild(script);\n    return () => {\n      document.body.removeChild(script);\n    };\n  }, [mapscript]);\n\n  // const closeOverlays = () => {\n  //     const overlays = document.querySelectorAll('.wrap');\n  //     overlays.forEach(overlay => overlay.style.display = 'none');\n  //     // 검색창 닫기\n  //     const searchBar = document.querySelector('.search-block');\n  //     if (searchBar) {\n  //         searchBar.style.display = 'none';\n  //     }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    style: {\n      width: \"100%\",\n      height: \"100vh\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n}\n_s(Kakao, \"W/5x9GiRDr2weOBiyuC5ktluA+c=\");\n_c = Kakao;\nexport default Kakao;\nvar _c;\n$RefreshReg$(_c, \"Kakao\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","axios","jsxDEV","_jsxDEV","Kakao","_s","overlays","setOverlays","closeOverlays","forEach","overlay","setMap","mapscript","window","kakao","maps","container","document","getElementById","options","center","LatLng","level","map","Map","addOverlayMapTypeId","MapTypeId","TRAFFIC","mapTypeControl","MapTypeControl","addControl","ControlPosition","RIGHT","zoomControl","ZoomControl","event","addListener","bound","getBounds","swLatlng","getSouthWest","neLatlng","getNorthEast","console","log","toString","url","process","env","REACT_APP_SERVER_URL","getLat","getLng","get","then","response","data","newOverlays","result","position","lat","lng","content","name","address","operatorName","marker","Marker","CustomOverlay","yAnchor","catch","error","script","createElement","src","REACT_APP_KAKAOMAP_API_KEY","async","onload","onerror","body","appendChild","removeChild","id","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/goseoyeong/Documents/한국외대/4-1/캡스톤설계및실습/semi/SC_React_Part/src/component/Kakao.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport './Kakao.css'\nimport axios from \"axios\";\n\nfunction Kakao() {\n    const [overlays, setOverlays] = useState([]);\n\n    const closeOverlays = () => {\n        overlays.forEach(function(overlay) {\n            overlay.setMap(null); \n        });\n    };\n    const mapscript = useCallback(() => {\n        //지도 표시\n        if (window.kakao && window.kakao.maps) {\n            var container = document.getElementById('map');\n            var options = {\n                center: new window.kakao.maps.LatLng(37.336382765356035, 127.26531823399158),\n                level: 3\n            };\n            const map = new window.kakao.maps.Map(container, options);\n\n            map.addOverlayMapTypeId(window.kakao.maps.MapTypeId.TRAFFIC); //실시간 교통\n            // map.addOverlayMapTypeId(window.kakao.maps.MapTypeId.ROADVIEW); //로드뷰\n            var mapTypeControl = new window.kakao.maps.MapTypeControl(); //type controller\n            map.addControl(mapTypeControl, window.kakao.maps.ControlPosition.RIGHT);\n\n            // 지도 확대 축소를 제어할 수 있는  줌 컨트롤을 생성합니다\n            var zoomControl = new window.kakao.maps.ZoomControl();\n            map.addControl(zoomControl, window.kakao.maps.ControlPosition.RIGHT);\n            \n            var overlays = [];\n\n            window.kakao.maps.event.addListener(map,'bounds_changed', function() {\n                var bound = map.getBounds();\n                var swLatlng = bound.getSouthWest();\n                var neLatlng = bound.getNorthEast();\n                \n                console.log('남서쪽 위경도 : ' + swLatlng.toString() + ',' + \n                '북동쪽 위경도 : '+ neLatlng.toString());\n\n                //서버에 GET 요청\n                const url = `${process.env.REACT_APP_SERVER_URL}/charger/search/marker?swLat=${swLatlng.getLat()}&swLng=${swLatlng.getLng()}&neLat=${neLatlng.getLat()}&neLng=${neLatlng.getLng()}`;\n                axios.get(url)\n                .then(response => {\n                    console.log('서버 응답', response.data);\n                    \n                    // 기존 마커와 오버레이 제거\n                    closeOverlays();\n                    \n                    //마커 생성\n                    const newOverlays = response.data.result.forEach((data) => {\n                        var position = new window.kakao.maps.LatLng(data.lat, data.lng);\n                        var content = `<div class=\"wrap\"> \n                                        <div class=\"info\"> \n                                            <div class=\"title\"> \n                                                ${data.name}  \n                                            </div> \n                                            <div class=\"body\"> \n                                                <div class=\"desc\"> \n                                                    <div class=\"ellipsis\">${data.address}</div> \n                                                    <div class=\"jibun ellipsis\">${data.name}는</div> \n                                                    <div class=\"jibun ellipsis\">${data.operatorName}회사에서 만든 충전기이다.</div> \n                                                </div> \n                                                <button class=\"img\" id=\"bookmarkButton\"></button> \n                                            </div> \n                                        </div> \n                                    </div>`;\n                        // 마커를 표시할 지도\n                        var marker = new window.kakao.maps.Marker({\n                            position: position,\n                            map: map\n                        });\n                        // customize overlay\n                        var overlay = new window.kakao.maps.CustomOverlay({\n                            position: position,\n                            content: content,\n                            yAnchor: 1\n                        });\n        \n                        window.kakao.maps.event.addListener(marker, \"click\", function () {\n                            closeOverlays();\n                            overlay.setMap(map);\n                        });\n                        return overlay;\n                    });\n                    setOverlays(newOverlays); //새로운 overlays 업데이트\n                })\n                    \n                .catch(error => {\n                    console.log('GET 요청 에러', error);\n                });\n            });\n        }\n    }, [overlays]);\n\n    useEffect(() => {\n        mapscript();\n\n        const script = document.createElement(\"script\");\n        script.src = `//dapi.kakao.com/v2/maps/sdk.js?appkey=${process.env.REACT_APP_KAKAOMAP_API_KEY}&libraries=services,drawing`;\n        script.async = true;\n        script.onload = () => {\n            mapscript();\n        };\n        script.onerror = (error) => {\n            console.error(\"Error loading Kakao maps script:\", error);\n        };\n        document.body.appendChild(script);\n\n        return () => {\n            document.body.removeChild(script);\n        };\n    }, [mapscript]);\n\n    // const closeOverlays = () => {\n    //     const overlays = document.querySelectorAll('.wrap');\n    //     overlays.forEach(overlay => overlay.style.display = 'none');\n    //     // 검색창 닫기\n    //     const searchBar = document.querySelector('.search-block');\n    //     if (searchBar) {\n    //         searchBar.style.display = 'none';\n    //     }\n    // };\n\n    return (\n        <div id=\"map\" style={{ width: \"100%\", height: \"100vh\" }}></div>\n    );\n}\n\nexport default Kakao;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}